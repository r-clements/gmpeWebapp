3000*exp(-2*x-2*y)
}
sim.1 <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
error <- 1e-10
plot(sim.1)
lambda <- function(x,y) {
3000*exp(-2*x-2*y)
}
sim.1 <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
error <- 1e-10
int.lambda <- function(a,b,c,d) {
tmp <- 750*(exp(-2*b)-exp(-2*a))*(exp(-2*d)-exp(-2*c))
if(abs(tmp - round(tmp)) < error) {
return(round(tmp))
} else {
return(tmp)
}
}
half.int.lambda.x <- function(a,b,c,d, half.value) {
-1/2*log(halv.value/(750*(exp(-2*d)-exp(-2*c)))+exp(-2*a))
}
half.int.lambda.y <- function(a,b,c,d, half.value) {
-1/2*log(halv.value/(750*(exp(-2*b)-exp(-2*a)))+exp(-2*c))
}
pixels <- split.space(int.lambda, 0, 1, 0, 1, split = "x")
half.int.lambda.x <- function(a,b,c,d, half.value) {
-1/2*log(half.value/(750*(exp(-2*d)-exp(-2*c)))+exp(-2*a))
}
half.int.lambda.y <- function(a,b,c,d, half.value) {
-1/2*log(half.value/(750*(exp(-2*b)-exp(-2*a)))+exp(-2*c))
}
pixels <- split.space(int.lambda, 0, 1, 0, 1, split = "x")
pixels.all <- split.space(int.lambda, 0, 1, 0, 1, split = "x")
names(pixels.all) <- c("xmin", "xmax", "ymin", "ymax", "int")
pixels.alt.all <- split.space.alt(int.lambda, 0, 1, 0, 1)
names(pixels.alt.all) <- c("xmin", "xmax", "ymin", "ymax", "int")
plot(c(0,1), c(0,1), type = "n", xlab="", ylab="")
rect(pixels.all[,1], pixels.all[,3], pixels.all[,2], pixels.all[,4])
points(sim.1$x, sim.1$y)
plot(c(-1,1), c(-1,1), type = "n", xlab="", ylab="")
rect(pixels.alt.all[,1], pixels.alt.all[,3], pixels.alt.all[,2], pixels.alt.all[,4])
plot(c(0,1), c(0,1), type = "n", xlab="", ylab="")
rect(pixels.alt.all[,1], pixels.alt.all[,3], pixels.alt.all[,2], pixels.alt.all[,4])
points(sim.1$x, sim.1$y, pch=16)
plot(c(0,1), c(0,1), type = "n", xlab="", ylab="")
rect(pixels.alt.all[,1], pixels.alt.all[,3], pixels.alt.all[,2], pixels.alt.all[,4])
head(pixels.alt.all)
pixels.alt.all[,5]
pixel.all[,5]
pixels.all[,5]
counts <- counts.alt <- matrix(0, nrow(pixels.all), 1000)
for(i in 1:1000) {
sim.tmp <- rpoispp(lambda, win = owin(c(-1,1), c(-1,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 1000)
for(i in 1:1000) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
pixels.all <- data.frame(split.space(int.lambda, 0, 1, 0, 1, split = "x"))
names(pixels.all) <- c("xmin", "xmax", "ymin", "ymax", "int")
head(pixels.all)
pixels.alt.all <- data.frame(split.space.alt(int.lambda, 0, 1, 0, 1)
names(pixels.alt.all) <- c("xmin", "xmax", "ymin", "ymax", "int")
counts <- counts.alt <- matrix(0, nrow(pixels.all), 1000)
for(i in 1:1000) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
pixels.alt.all <- data.frame(split.space.alt(int.lambda, 0, 1, 0, 1))
names(pixels.alt.all) <- c("xmin", "xmax", "ymin", "ymax", "int")
counts <- counts.alt <- matrix(0, nrow(pixels.all), 1000)
for(i in 1:1000) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
temp <- counts[13, ]
temp.alt <- counts.alt[13, ]
hist(temp, breaks = c(-.5, .5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5))
hist(temp.alt, breaks = c(-.5, .5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5))
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,13])) +
geom_rect()
lambda <- function(x,y) {
3000*exp(-52*x-2*y)
}
sim.1 <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
plot(sim.1)
lambda <- function(x,y) {
3000*exp(-5*x-2*y)
}
sim.1 <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
plot(sim.1)
counts <- counts.alt <- matrix(0, nrow(pixels.all), 1000)
for(i in 1:1000) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
temp <- counts[13, ]
temp.alt <- counts.alt[13, ]
hist(temp, breaks = c(-.5, .5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5))
hist(temp.alt, breaks = c(-.5, .5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5))
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,13])) +
geom_rect()
lambda <- function(x,y) {
3000*exp(-5*x-5*y)
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 10)
for(i in 1:10) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,10])) +
geom_rect()
lambda <- function(x,y) {
5000*exp(-2*x-2*y)
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 10)
for(i in 1:10) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,10])) +
geom_rect()
lambda <- function(x,y) {
3000*exp(2*x-2*y)
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 10)
for(i in 1:10) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,10])) +
geom_rect()
lambda <- function(x,y) {
3000*exp(-4*x-2*y)
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 10)
for(i in 1:10) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,10])) +
geom_rect()
install.packages("vcd")
library(vcd)
?goodfit
test <- goodfit(temp, type = "poisson", method = "MinChisq")
summary(test)
lambda <- function(x,y) {
3000*exp(-2*x-2*y)
}
pixels.all <- data.frame(split.space(int.lambda, 0, 1, 0, 1, split = "x"))
names(pixels.all) <- c("xmin", "xmax", "ymin", "ymax", "int")
pixels.all$int
counts <- counts.alt <- matrix(0, nrow(pixels.all), 1000)
for(i in 1:1000) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
temp <- counts[10, ]
temp.alt <- counts.alt[13, ]
temp.alt <- counts.alt[10, ]
hist(temp, breaks = c(-.5, .5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5))
hist(temp.alt, breaks = c(-.5, .5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5))
libary(ggplot2)
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,10])) +
geom_rect()
library(vcd)
test <- goodfit(temp, type = "poisson", method = "MinChisq")
names(test)
summary(test)
library(vcd)
test <- goodfit(temp.alt, type = "poisson", method = "MinChisq")
summary(test)
names(summary(test))
test
?summary.goodfit
plot(test)
summary.goodfit
summary
plot.goodfit
class(test)
test
p
head(temp)
sum(semp)
sum(temp)
p*sum(temp)
sum(p)
p*(1/sum(p))
p*(1/sum(p))*sum(temp)
1/sum(p)
?dpois
test <- goodfit(temp, type = "poisson", method = "MinChisq", par = list(lambda = 1))
test
summary(test)
p
dpois(c(0,1,2,3,4,5,6), lambda = 1)
p <- dpois(unique(sort(temp)), lambda = 1)
p
p*unique(sort(temp))
unique(sort(temp))
tabulate(temp+1)
tabulate(temp+1)*p
chisq.test(x=tabulate(temp+1), p=p, rescale.p = T)
chisq.test(x=tabulate(temp+1), p=tabulate(temp+1)*p, rescale.p = T)
chisq.test(x=tabulate(temp+1), p=tabulate(temp+1)*p, rescale.p = T) -> test
names(test)
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts[i, ]
p <- dpois(unique(sort(temp)), lambda = pixels.alt.all[i,5])
test <- chisp.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts[i, ]
p <- dpois(unique(sort(temp)), lambda = pixels.alt.all[i,5])
test <- chisq.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
warnings()
length(p.values)
p.values
i <- 21
temp <- counts[i, ]
length(temp)
p <- dpois(unique(sort(temp)), lambda = pixels.alt.all[i,5])
p
tabulate(temp+1)
unique(sort(temp))
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts[i, ]
p <- dpois(min(temp):max(temp), lambda = pixels.alt.all[i,5])
test <- chisq.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
hist(p.values)
sum(p.values < .05)
1000*.05
sum(p.values < .05/1000)
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts[i, ]
p <- dpois(min(temp):max(temp), lambda = pixels.alt.all[i,5])
test <- chisq.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 10000)
for(i in 1:10000) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts[i, ]
p <- dpois(min(temp):max(temp), lambda = pixels.alt.all[i,5])
test <- chisq.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
hist(p.values)
sum(p.values < .05)/10000
sum(p.values < .05)
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts.alt[i, ]
p <- dpois(min(temp):max(temp), lambda = pixels.alt.all[i,5])
test <- chisq.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
hist(p.values)
sum(p.values < .05)
nrow(counts.alt)
length(p.values)
sum(p.values < .05)/length(p.values)
sum(p.values < .05/length(p.values))/length(p.values)
nrow(pixels.alt.all)
pixels.alt.all$int
p.values
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = p.values)) +
geom_rect()
x <- c(rep(1,50), rep(2, 10), 100)
lx <- log(x)
plot(x, lx)
unique(ls)
unique(lx)
unique(x/sum(x))
unique(lx/sum(lx))
.012/.59
.06/.40
unique(log(x/sum(x)))
library(mgcv)
?gam
x <- rnorm(100)
f <- c(rep("one", 50), rep("two", 50))
y <- 5*x+rnorm(100)
plot(x,y)
summary(lm(y ~ x + f))
fit <- lm(y ~ x + f)
?predict
head(predict)
head(predict(lm))
head(predict(fit))
head(x)
head(f)
summary(fit)
.0549+4.95142*x[1]
tail(predict)
tail(predict(fit))
.0549+4.95142*tail(x,1)-.21982
f <- c(rep("one", 50), rep("two", 25), rep("three", 25))
fit <- lm(y ~ x + f)
summary(fit)
tail(predict(fit))
.05454+4.94889*tail(x,1)-.19510
.05454+4.94889*tail(x,1)-.19510*2
coef(fit)
?corr
?cor
X <- data.frame(1:10, 1:10, 1:10)
cor(X)
setwd("~/work/GFZ/GMPE App/Shiny")
library(shiny)
runApp()
?C
?contrasts
?lm
runApp()
X
x <- c(rep("one", 50), rep("two", 50), rep("three", 50))
y <- rnorm(150)
lm(y ~ x)
fit <- lm(y ~ x)
summary(fit)
head(predict(fit))
x2 <- rnorm(150)
fit <- lm(y ~ x + x2)
summary(fit)
head(predict(fit))
head(x2)
coef(fit)
coef(fit)[1]
coef(fit)[1]+coef(fit)[4]*x2[1]
my.c <- list(x = contr.sum(length(levels(x))))
length(levels(x))
x <- as.factor(x)
length(levels(x))
my.c <- list(x = contr.sum(length(levels(x))))
fit <- lm(y ~ x + x2, contrasts=my.c)
summary(fit)
d <- data.frame()
d
d$x <- c(1,2,3)
d <- cbind(d, c(1,2,3))
d <- data.frame(d, c(1,2,3))
d
d <- c()
d$x <- c(1,2,3)
d
d <- c()
d <- data.frame(c())
d
d
d <- data.frame()
d$x <- c()
d
d$y <- c()
d$z <- c()
d
names(d)
d$x <- characte(0)
d$x <- character(0)
d
d$y <- character(0)
d$z <- character(0)
d
d <- data.frame()
d$x <- character(0)
d
d$x <- c(1,2,3)
.03*50
