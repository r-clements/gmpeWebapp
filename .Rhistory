split.space.alt <- function(int.function, a, b, c, d) {
total <- int.function(a,b,c,d)
#cat("I'm working on it-- total = ", total, "\n")
if(total <= 1) {
#cat("Now I'm small enough\n")
results <- c(a,b,c,d, total)
return(results)
}
if(total == round(total)) {
if(total%%2 == 0) {
half <- total/2
new.b <- half.int.lambda.x(a,b,c,d,half)
new.d <- half.int.lambda.y(a,b,c,d,half)
max.side.lengths <- c(max(new.b-a, b-new.b, d-c), max(b-a, new.d-c, d-new.d))
if(which(max.side.lengths == min(max.side.lengths)) == 1){
split <- "x"
} else {
split <- "y"
}
if(split == "x") {
r1 <- split.space.alt(int.function, a, new.b, c, d)
r2 <- split.space.alt(int.function, new.b, b, c, d)
} else {
r1 <- split.space.alt(int.function, a, b, c, new.d)
r2 <- split.space.alt(int.function, a, b, new.d, d)
}
} else {
half.one <- floor(total/2)
new.b <- half.int.lambda.x(a,b,c,d,half.one)
new.d <- half.int.lambda.y(a,b,c,d,half.one)
max.side.lengths <- c(max(new.b-a, b-new.b, d-c), max(b-a, new.d-c, d-new.d))
if(which(max.side.lengths == min(max.side.lengths)) == 1){
split <- "x"
} else {
split <- "y"
}
if(split == "x") {
r1 <- split.space.alt(int.function, a, new.b, c, d)
r2 <- split.space.alt(int.function, new.b, b, c, d)
} else {
r1 <- split.space.alt(int.function, a, b, c, new.d)
r2 <- split.space.alt(int.function, a, b, new.d, d)
}
}
} else {
if(floor(total)%%2 == 0) {
half <- floor(total)/2
new.b <- half.int.lambda.x(a,b,c,d,half)
new.d <- half.int.lambda.y(a,b,c,d,half)
max.side.lengths <- c(max(new.b-a, b-new.b, d-c), max(b-a, new.d-c, d-new.d))
if(which(max.side.lengths == min(max.side.lengths)) == 1){
split <- "x"
} else {
split <- "y"
}
if(split == "x") {
r1 <- split.space.alt(int.function, a, new.b, c, d)
r2 <- split.space.alt(int.function, new.b, b, c, d)
} else {
r1 <- split.space.alt(int.function, a, b, c, new.d)
r2 <- split.space.alt(int.function, a, b, new.d, d)
}
} else {
half.one <- ceiling(total)/2
new.b <- half.int.lambda.x(a,b,c,d,half.one)
new.d <- half.int.lambda.y(a,b,c,d,half.one)
max.side.lengths <- c(max(new.b-a, b-new.b, d-c), max(b-a, new.d-c, d-new.d))
if(which(max.side.lengths == min(max.side.lengths)) == 1){
split <- "x"
} else {
split <- "y"
}
if(split == "x") {
r1 <- split.space.alt(int.function, a, new.b, c, d)
r2 <- split.space.alt(int.function, new.b, b, c, d)
} else {
r1 <- split.space.alt(int.function, a, b, c, new.d)
r2 <- split.space.alt(int.function, a, b, new.d, d)
}
}
}
return(rbind(r1, r2))
}
#Simulation 1:
#lambda(x,y) = 200x^2|y| on a window [-1,1]x[-1,1]
#to make it simple, we will only use [-1,1]x[0,1] and just reflect this over the x-axis
library(spatstat)
lambda <- function(x,y) {
200*x^2*abs(y)
}
sim.1 <- rpoispp(lambda, win = owin(c(-1,1), c(-1,1)))
error <- 1e-10
int.lambda <- function(a,b,c,d) {
tmp <- 100/3*(b^3-a^3)*(d^2-c^2)
if(abs(tmp - round(tmp)) < error) {
return(round(tmp))
} else {
return(tmp)
}
}
half.int.lambda.x <- function(a,b,c,d, half.value) {
tmp <- (3/100)*half.value/(d^2-c^2)+a^3
if(tmp < 0) {
-abs((3/100)*half.value/(d^2-c^2)+a^3)^(1/3)
} else {
((3/100)*half.value/(d^2-c^2)+a^3)^(1/3)
}
}
half.int.lambda.y <- function(a,b,c,d, half.value) {
sqrt((3/100)*half.value/(b^3-a^3)+c^2)
}
#initial subdivision should be a vertical split such that the integral is 33 on one side,
#with the remainder on the other
pixels <- split.space(int.lambda, -1, 1, 0, 1, split = "x")
pixels.tmp <- pixels; pixels.tmp[,c(3,4)] <- -pixels.tmp[,c(4,3)]
pixels.all <- data.frame(rbind(pixels, pixels.tmp))
names(pixels.all) <- c("xmin", "xmax", "ymin", "ymax", "int")
pixels.alt <- split.space.alt(int.lambda, -1, 1, 0, 1)
pixels.tmp <- pixels.alt; pixels.tmp[,c(3,4)] <- -pixels.tmp[,c(4,3)]
pixels.alt.all <- data.frame(rbind(pixels.alt, pixels.tmp))
names(pixels.alt.all) <- c("xmin", "xmax", "ymin", "ymax", "int")
plot(c(-1,1), c(-1,1), type = "n", xlab="", ylab="")
rect(pixels.all[,1], pixels.all[,3], pixels.all[,2], pixels.all[,4])
points(sim.1$x, sim.1$y)
plot(c(-1,1), c(-1,1), type = "n", xlab="", ylab="")
rect(pixels.alt.all[,1], pixels.alt.all[,3], pixels.alt.all[,2], pixels.alt.all[,4])
points(sim.1$x, sim.1$y, pch=16)
countf.s <- function(xy, gf)
{
which((gf$xmin <= xy[1]) & (gf$xmax > xy[1]) & (gf$ymin <= xy[2]) & (gf$ymax > xy[2]))
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 1000)
for(i in 1:1000) {
sim.tmp <- rpoispp(lambda, win = owin(c(-1,1), c(-1,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,13])) +
geom_rect()
library(ggplot2)
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,13])) +
geom_rect()
counts <- counts.alt <- matrix(0, nrow(pixels.all), 1000)
sim.keep <- c()
for(i in 1:1000) {
sim.tmp <- rpoispp(lambda, win = owin(c(-1,1), c(-1,1)))
sim.keep <- rbind(sim.keep, cbind(sim.tmp$x, sim.tmp$y, rep(i, sim.tmp$n)))
sim.tmp <- sim.keep[,c(1,2)]
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 5)
sim.keep <- c()
for(i in 1:1000) {
sim.tmp <- rpoispp(lambda, win = owin(c(-1,1), c(-1,1)))
sim.keep <- rbind(sim.keep, cbind(sim.tmp$x, sim.tmp$y, rep(i, sim.tmp$n)))
sim.tmp <- sim.keep[,c(1,2)]
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 5)
sim.keep <- c()
for(i in 1:5) {
sim.tmp <- rpoispp(lambda, win = owin(c(-1,1), c(-1,1)))
sim.keep <- rbind(sim.keep, cbind(sim.tmp$x, sim.tmp$y, rep(i, sim.tmp$n)))
sim.tmp <- sim.keep[,c(1,2)]
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,5])) +
geom_rect()
counts <- counts.alt <- matrix(0, nrow(pixels.all), 5)
sim.keep <- c()
for(i in 1:5) {
sim.tmp <- rpoispp(lambda, win = owin(c(-1,1), c(-1,1)))
sim.keep <- rbind(sim.keep, cbind(sim.tmp$x, sim.tmp$y, rep(i, sim.tmp$n)))
sim.tmp <- cbind(sim.tmp$x, sim.tmp$y)
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,5])) +
geom_rect()
temp.alt <- counts.alt[,5]
temp.alt
hist(temp.alt)
totals <- rep(0, length(temp.alt))
for(i in 1:length(temp.alt)) {
totals[i] <- length(which(temp.alt==temp.alt[i]))/length(temp.alt)
}
totals
min(totals)
p <- dpois(temp.alt, lambda = 1)
min(p)
max(p)
max(totals)
resids <- totals - p
resids
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = resids)) +
geom_rect()
head(sim.keep)
head(pixels.all.alt)
head(pixels.alt.all)
p <- dpois(temp.alt, lambda = pixels.alt.all$int)
resids <- totals - p
min(resids)
max(resids)
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = resids)) +
geom_rect()
min(p)
max(p)
X <- as.ppp(sim.keep[which(sim.keep[,3]==5), c(1,2)], win = owin(c(-1,1), c(-1,1)))
X <- as.ppp(sim.keep[which(sim.keep[,3]==5), c(1,2)], window = owin(c(-1,1), c(-1,1)))
X <- as.ppp(sim.keep[which(sim.keep[,3]==5), c(1,2)], c(-1,1,-1,1))
plot(X)
sim.test <- sim.keep[which(sim.keep[,3]==5), c(1,2)]
X <- as.ppp(sim.test, c(-1,1,-1,1))
place <- apply(sim.test, 1, countf.s, pixels.all)
head(place)
tabulate(place)
length(place)
length(totals)
length(p)
x <- c(1,2,3)
sum(x==1)
sum(x==3)
wts <- rep(0, length(place))
for(i in 1:length(place)){
wts[i] <- sum(place == place[i])
}
head(wts)
hist(wts)
dens <- density.ppm(X, weights = wts)
dens <- density.ppp(X, weights = wts)
plot(dens)
?diagnose
?diagnose.ppm
Y <- rpoisp(100)
Y <- rpoispp(100)
plot(Y)
dens <- density.ppp(Y)
plot(dens)
dens <- density.ppp(Y, weights = rep(0, Y$n))
plot(dens)
dens <- density.ppp(Y, weights = rep(1, Y$n))
plot(dens)
dens <- density.ppp(Y, weights = rep(.5, Y$n))
plot(dens)
dens <- density.ppp(Y, weights = rep(.1, Y$n))
plot(dens)
dens <- density.ppp(Y, weights = rnorm(Y$n)
)
dens <- density.ppp(Y, weights = rnorm(Y$n)
)
plot(dens)
wts
dens <- density.ppp(X, weights = wts)
plot(dens)
dens <- density.ppp(X, weights = rep(1, X$n))
plot(dens)
dens <- density.ppp(X, weights = wts/sum(wts))
plot(dens)
plot(X$x, X$y, cex = wts/sum(wts))
plot(X$x, X$y, cex = wts)
wts2 <- rep(0, length(wts))
for(i in 1:length(wts2)) {
wts2[i] <- length(which(temp.alt==wts[i]))/length(temp.alt)
}
p2 <- dpois(wts, lambda = 1)
resids <- wts2-p2
resids
hist(resids)
dens <- density.ppp(X, weights = resids)
plot(dens)
dens <- density.ppp(X, weights = (resids-mean(resids))/sd(resids))
plot(dens)
mean(resids)
sd(resids)
hist((resids-mean(resids))/sd(resids))
hist(log(resids))
hist(resids)
log(resids+1)
hist(log(resids+1))
hist(resids)
log(resids+1)
resids
log(exp(resids))
resids
hist((resids-mean(resids))/sd(resids))
min((resids-mean(resids))/sd(resids))
max((resids-mean(resids))/sd(resids))
lambda <- function(x,y) {
300*x^2*abs(y)
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 5)
sim.keep <- c()
for(i in 1:5) {
sim.tmp <- rpoispp(lambda, win = owin(c(-1,1), c(-1,1)))
sim.keep <- rbind(sim.keep, cbind(sim.tmp$x, sim.tmp$y, rep(i, sim.tmp$n)))
sim.tmp <- cbind(sim.tmp$x, sim.tmp$y)
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,5])) +
geom_rect()
sim.test <- sim.keep[which(sim.keep[,3]==5), c(1,2)]
X <- as.ppp(sim.test, c(-1,1,-1,1))
place <- apply(sim.test, 1, countf.s, pixels.all)
wts <- rep(0, length(place))
for(i in 1:length(place)){
wts[i] <- sum(place == place[i])
}
wts2 <- rep(0, length(wts))
for(i in 1:length(wts2)) {
wts2[i] <- length(which(temp.alt==wts[i]))/length(temp.alt)
}
p2 <- dpois(wts, lambda = 1)
resids <- wts2-p2
dens <- density.ppp(X, weights = resids)
plot(dens)
min(resids)
max(resids)
mean(resids)
sd(resids)
hist(resids)
plot(X)
temp.alt <- counts.alt[,5]
p <- dpois(temp.alt, lambda = pixels.alt.all$int)
totals <- rep(0, length(temp.alt))
for(i in 1:length(temp.alt)) {
totals[i] <- length(which(temp.alt==temp.alt[i]))/length(temp.alt)
}
resids <- totals - p
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = resids)) +
geom_rect()
library(plyr)
?join
32*12
32*11
187.40-352
?with
?last_plot
library(ggplot2)
?last_plot
?ggfluctuation
ggfluctuation(table(movies$Action, movies$Comedy))
obs <- sample(100)
head(obs)
pred <- sample(100)
plot(obs, pred)
obs <- pred + rnorm(100, 0, .5)
plot(obs, pred)
obs <- pred + rnorm(100, 0, 1)
plot(obs, pred)
library(verification)
?crps
scores <- crps(obs, cbind(pred, 1))
scores2 <- crps(obs, cbind(pred, .5))
scores$IGN
scores2$IGN
scores$CRPS
scores2$CRPS
scores <- crps(obs, cbind(pred, 5))
scores$CRPS
scores2$CRPS
scores2$IGN
scores$IGN
scores <- crps(obs, cbind(pred, 4))
scores$IGN
scores <- crps(obs, cbind(pred, 3))
scores$IGN
scores$CRPS
scores <- crps(obs, cbind(pred, 2))
scores$CRPS
scores <- crps(obs, cbind(pred, 1))
scores$CRPS
scores <- crps(obs, cbind(pred, 1.5))
scores$CRPS
scores <- crps(obs, cbind(pred, 1.2))
scores$CRPS
scores <- crps(obs, cbind(pred, 3))
scores$CRPS
scores <- crps(obs, cbind(pred, 4))
scores$CRPS
scores <- crps(obs, cbind(pred, 1))
scores$CRPS
scores <- crps(obs, cbind(pred, .5))
scores$CRPS
scores <- crps(obs, cbind(pred, .75))
scores$CRPS
scores <- crps(obs, cbind(pred, 1))
scores$IGN
scores <- crps(obs, cbind(pred, 2))
scores$IGN
scores <- crps(obs, cbind(pred, 3))
scores$IGN
scores <- crps(obs, cbind(pred, 4))
scores$IGN
scores <- crps(obs, cbind(pred, 5))
scores$IGN
scores <- crps(obs, cbind(pred, .5))
scores$IGN
scores <- crps(obs, cbind(pred, 10))
scores$IGN
scores <- crps(obs, cbind(pred, .1))
scores$IGN
-mean(dnorm(obs, pred, 1))
-mean(log(dnorm(obs, pred, 1)))
-mean(log(dunif(obs, min(pred), max(pred))))
head(dunif(obs, min(pred), max(pred)))
pred <- sample(10)
obs <- pred + rnorm(10)
plot(obs, pred)
scores <- crps(obs, cbind(pred, 1))
scores$IGN
scores$CRPS
scores <- crps(obs, cbind(pred, 2))
scores$IGN
scores$CRPS
scores <- crps(obs, cbind(pred, 1.5))
scores$IGN
scores$CRPS
scores <- crps(obs, cbind(pred, .5))
scores$IGN
scores$CRPS
scores <- crps(obs, cbind(pred, .75))
scores$IGN
scores$CRPS
obs <- rexp(10)
hist(obs)
obs <- rexp(1000)
hist(obs)
hist(obs, breaks=20)
obs <- rexp(10)
hist(obs)
pred <- rexp(10)
hist(pred)
#Simulate some observed and predicted intensities
Ipre <- runif(100, min = 1, max = 10)
Iobs <- Ipre + rnorm(100, mean = 0, sd = 1)
#Compute the MAE
mae <- mean(abs(Iobs-Ipre))
mae
#Compute the RMSE
rmse <- sqrt(mean((Iobs-Ipre)^2))
rmse
?aov
?tukeyHSD
TukeyHSD
?TukeyHSD
aov
80*80
100-((100-80)+(100-80)
)
?rstandard
setwd("~/work/GFZ/GMPE App/Shiny")
library(shiny)
runApp()
