pixels.all <- data.frame(split.space(int.lambda, 0, 1, 0, 1, split = "x"))
names(pixels.all) <- c("xmin", "xmax", "ymin", "ymax", "int")
pixels.all$int
counts <- counts.alt <- matrix(0, nrow(pixels.all), 1000)
for(i in 1:1000) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
temp <- counts[10, ]
temp.alt <- counts.alt[13, ]
temp.alt <- counts.alt[10, ]
hist(temp, breaks = c(-.5, .5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5))
hist(temp.alt, breaks = c(-.5, .5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5))
libary(ggplot2)
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = counts.alt[,10])) +
geom_rect()
library(vcd)
test <- goodfit(temp, type = "poisson", method = "MinChisq")
names(test)
summary(test)
library(vcd)
test <- goodfit(temp.alt, type = "poisson", method = "MinChisq")
summary(test)
names(summary(test))
test
?summary.goodfit
plot(test)
summary.goodfit
summary
plot.goodfit
class(test)
test
p
head(temp)
sum(semp)
sum(temp)
p*sum(temp)
sum(p)
p*(1/sum(p))
p*(1/sum(p))*sum(temp)
1/sum(p)
?dpois
test <- goodfit(temp, type = "poisson", method = "MinChisq", par = list(lambda = 1))
test
summary(test)
p
dpois(c(0,1,2,3,4,5,6), lambda = 1)
p <- dpois(unique(sort(temp)), lambda = 1)
p
p*unique(sort(temp))
unique(sort(temp))
tabulate(temp+1)
tabulate(temp+1)*p
chisq.test(x=tabulate(temp+1), p=p, rescale.p = T)
chisq.test(x=tabulate(temp+1), p=tabulate(temp+1)*p, rescale.p = T)
chisq.test(x=tabulate(temp+1), p=tabulate(temp+1)*p, rescale.p = T) -> test
names(test)
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts[i, ]
p <- dpois(unique(sort(temp)), lambda = pixels.alt.all[i,5])
test <- chisp.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts[i, ]
p <- dpois(unique(sort(temp)), lambda = pixels.alt.all[i,5])
test <- chisq.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
warnings()
length(p.values)
p.values
i <- 21
temp <- counts[i, ]
length(temp)
p <- dpois(unique(sort(temp)), lambda = pixels.alt.all[i,5])
p
tabulate(temp+1)
unique(sort(temp))
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts[i, ]
p <- dpois(min(temp):max(temp), lambda = pixels.alt.all[i,5])
test <- chisq.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
hist(p.values)
sum(p.values < .05)
1000*.05
sum(p.values < .05/1000)
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts[i, ]
p <- dpois(min(temp):max(temp), lambda = pixels.alt.all[i,5])
test <- chisq.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
counts <- counts.alt <- matrix(0, nrow(pixels.all), 10000)
for(i in 1:10000) {
sim.tmp <- rpoispp(lambda, win = owin(c(0,1), c(0,1)))
sim.tmp <- (cbind(sim.tmp$x, sim.tmp$y))
place <- apply(sim.tmp, 1, countf.s, pixels.all)
place.alt <- apply(sim.tmp, 1, countf.s, pixels.alt.all)
count <- tabulate(place)
count.alt <- tabulate(place.alt)
if(length(count) != nrow(pixels.all)) {
count <- c(count, rep(0, nrow(pixels.all) - length(count)))
}
if(length(count.alt) != nrow(pixels.alt.all)) {
count.alt <- c(count.alt, rep(0, nrow(pixels.alt.all) - length(count.alt)))
}
counts[,i] <- count; counts.alt[,i] <- count.alt
}
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts[i, ]
p <- dpois(min(temp):max(temp), lambda = pixels.alt.all[i,5])
test <- chisq.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
hist(p.values)
sum(p.values < .05)/10000
sum(p.values < .05)
p.values <- c()
for(i in 1:nrow(counts.alt)) {
temp <- counts.alt[i, ]
p <- dpois(min(temp):max(temp), lambda = pixels.alt.all[i,5])
test <- chisq.test(x = tabulate(temp+1), p=p, rescale.p=TRUE)
p.values <- c(p.values, test$p.value)
}
hist(p.values)
sum(p.values < .05)
nrow(counts.alt)
length(p.values)
sum(p.values < .05)/length(p.values)
sum(p.values < .05/length(p.values))/length(p.values)
nrow(pixels.alt.all)
pixels.alt.all$int
p.values
ggplot(pixels.alt.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill = p.values)) +
geom_rect()
x <- c(rep(1,50), rep(2, 10), 100)
lx <- log(x)
plot(x, lx)
unique(ls)
unique(lx)
unique(x/sum(x))
unique(lx/sum(lx))
.012/.59
.06/.40
unique(log(x/sum(x)))
library(mgcv)
?gam
library(shiny)
setwd("~/work/GFZ/GMPE App/Shiny")
runApp()
?lm
runApp()
library(nlme)
?lmer
library(lme4)
?lmer
runApp()
runApp()
?theme
runApp()
?radioButtons
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
?conditionalPanel
runApp()
runApp()
runApp()
runApp()
runApp()
?ddply
?crps
?with
runApp()
runApp()
head(data)
tmp <- read.csv("sample.csv", h=T)
head(tmp)
make.scores <- function(score.data) {
mae.fun <- function(d) {
mean(abs(d))
}
rmse.fun <- function(d) {
sqrt(mean(d^2))
}
score.data <- score.data[,c("model", "resids")]
mae <- ddply(score.data, "model", .fun = data.frame("mae.fun", "rmse.fun"))
#rmse <- ddply(score.data, "model", .fun = sqrt(mean(score.data$resids^2)))
#scores <- data.frame(mae, rmse)
mae
}
test <- make.scores(tmp)
mae.fun <- function(d) {
mean(abs(d))
}
rmse.fun <- function(d) {
sqrt(mean(d^2))
}
head(mae.fun(tmp$resids))
head(rmse.fun(tmp$resids))
score.data <- tmp[,c("model", "resids")]
head(score.data)
mae <- ddply(score.data, "model", .fun = data.frame("mae.fun", "rmse.fun"))
mae <- ddply(score.data, "model", .fun = "mae.fun")
mae.fun <- function(d$resids) {
mean(abs(d$resids))
}
rmse.fun <- function(d$resids) {
sqrt(mean(d$resids^2))
}
mae.fun <- function(d) {
mean(abs(d$resids))
}
rmse.fun <- function(d) {
sqrt(mean(d$resids^2))
}
mae <- ddply(score.data, "model", .fun = "mae.fun")
head(mae)
runApp()
head(score.data)
tail(score.data)
mae <- ddply(score.data, "model", .fun = "mae.fun")
rmse <- ddply(score.data, "model", .fun = "rmse.fun")
scores <- data.frame(mae, rmse[,2])
names(scores) <- c("Model", "MAE", "RMSE")
head(scores)
scores
runApp()
head(tmp)
pred.type <- rep("PGA2", length(tmp$model == "1990FT"))
length(pred.type)
nrow(tmp)
pred.type <- rep("PGA2", sum(tmp$model == "1990FT"))
length(pred.type)
pred.type <- c(pred.type, rep("PGA1", sum(tmp$model == "1995MY")))
length(pred.type)
tmp$pred.type <- pred.type
head(tmp)
pred <- tmp[, "PGA2.1"]
pred[pred == -1] <- tmp[tmp$PGA1.1 != -1, "PGA1.1"]
head(pred)
tail(pred)
tail(tmp)
tmp$pred <- pred
head(tmp)
obs <- tmp[PGA2]
obs <- tmp[,"PGA2"]
obs[obs == -1] <- tmp[tmp$PGA1 != -1, "PGA1"]
head(obs)
tail(obs)
tmp$obs <- obs
head(tmp)
tmp2 <- tmp[,-c("PGA1", "PGA2", "PGA3", "PGA4", "PGA5", "PGA1.1", "PGA2.1", "PGA3.1", "PGA4.1", "PGA5.1")]
head(tmp2)
tmp2 <- tmp[,-(11:20)]
head(tmp2)
write.csv(tmp2, "sample2.csv", row.names=F)
?crps
mae.fun <- function(d) {
mean(abs(d$resids))
}
rmse.fun <- function(d) {
sqrt(mean(d$resids^2))
}
prob.score.fun <- function(d) {
pr.scores <- crps(d$obs, d[,c("pred", "sigma")])
c(pr.scores$IGN, pr.scores$CRPS)
}
score.data <- tmp2[,c("model", "resids", "sigma", "pred", "obs")]
mae <- ddply(score.data, "model", .fun = "mae.fun")
rmse <- ddply(score.data, "model", .fun = "rmse.fun")
head(mae)
head(rmse)
prob.scores <- ddply(score.data, "model", .fun = "prob.score.fun")
head(prob.scores)
runApp()
score.data <- t,p2[,c("model", "resids", "sigma", "pred", "obs", "event.num")]
score.data <- tmp2[,c("model", "resids", "sigma", "pred", "obs", "event.num")]
head(score.data)
mae <- ddply(score.data, c("model", "event.num"), .fun = "mae.fun")
head(mae)
mae <- ddply(score.data, c("model", "event.num"), .fun = "mae.fun")
rmse <- ddply(score.data, c("model", "event.num"), .fun = "rmse.fun")
prob.scores <- ddply(score.data, c("model", "event.num"), .fun = "prob.score.fun")
scores <- data.frame(mae, rmse[,3], prob.scores[,c(3,4)])
head(scores)
names(scores) <- c("Model", "Event.num", "MAE", "RMSE", "IGN", "CRPS")
head(scores)
runApp()
runApp()
temp <- scores
labs <- unique(temp$Event.num)
brks <- seq(1, length(labs), by = 1)
p1 <- ggplot(temp, aes(x=Event.num, y=MAE))
p1 + geom_line(aes(colour = Models, group = Models)) +
geom_point(aes(colour = Model), size=3)    +
labs(x = "Event Num", y = "MAE") +
scale_x_discrete(labels = labs, breaks = brks, expand = c(.05,.05)) +
coord_cartesian(ylim=c(0,3)) +
theme(axis.text.x=element_text(angle = 90))
p1 <- ggplot(temp, aes(x=Event.num, y=MAE))
p1 + geom_line(aes(colour = Model, group = Model)) +
geom_point(aes(colour = Model), size=3)    +
labs(x = "Event Num", y = "MAE") +
scale_x_discrete(labels = labs, breaks = brks, expand = c(.05,.05)) +
coord_cartesian(ylim=c(0,3)) +
theme(axis.text.x=element_text(angle = 90))
brks
labs
length(brks)
length(labs)
names(temp)
p1 <- ggplot(temp, aes(x=Event.num, y=MAE))
p1 + geom_line(aes(colour = Model, group = Model)) +
geom_point(aes(colour = Model), size=3)    +
labs(x = "Event Num", y = "MAE") +
scale_x_discrete(labels = labs, breaks = brks, expand = c(.05,.05)) +
theme(axis.text.x=element_text(angle = 90))
p1 <- ggplot(temp, aes(x=Event.num, y=MAE))
p1 + geom_line(aes(colour = Model, group = Model)) +
geom_point(aes(colour = Model), size=3)
head(temp)
class(temp$Event.num)
p1 <- ggplot(temp, aes(x=Event.num, y=MAE))
p1 + geom_line(aes(colour = Model, group = Model))
temp$Event.num <- as.character(temp$Event.num)
labs <- unique(temp$Event.num)
brks <- seq(1, length(labs), by = 1)
p1 + geom_line(aes(colour = Model, group = Model)) +
p1 <- ggplot(temp, aes(x=Event.num, y=MAE))
p1 + geom_line(aes(colour = Model, group = Model))
head(labs)
tail(labs)
p1 <- ggplot(temp, aes(x=Event.num, y=MAE))
p1 + geom_line(aes(colour = Model, group = Model)) +
geom_point(aes(colour = Model), size=3)    +
labs(x = "Event Num", y = "MAE") +
scale_x_discrete(labels = labs, breaks = brks, expand = c(.05,.05)) +
theme(axis.text.x=element_text(angle = 90))
p1 <- ggplot(temp, aes(x=Event.num, y=MAE))
p1 + geom_line(aes(colour = Model, group = Model)) +
geom_point(aes(colour = Model), size=3)    +
labs(x = "Event Num", y = "MAE") +
scale_x_discrete(labels = labs, breaks = brks) +
theme(axis.text.x=element_text(angle = 90))
runApp()
p1 <- ggplot(temp, aes(x=Event.num, y=MAE))
p1 + geom_line(aes(colour = Model, group = Model)) +
geom_point(aes(colour = Model), size=3)    +
labs(x = "Event Num", y = "MAE") +
scale_x_discrete(labels = labs, breaks = brks, expand = c(.05,.05)) +
theme(axis.text.x=element_text(angle = 90))
print(p1)
runApp()
?scale_x_discrete
labs <- unique(temp$Event.num)
brks <- seq(1, length(labs), by = 1)
labs
brks
p1 <- ggplot(temp, aes(x=Event.num, y=MAE)) +
geom_line(aes(colour = Model, group = Model)) +
geom_point(aes(colour = Model), size=3)    +
labs(x = "Event Num", y = "MAE") +
scale_x_discrete(labels = labs, breaks = brks, expand = c(.05,.05)) +
theme(axis.text.x=element_text(angle = 90))
print(p1)
p1 <- ggplot(temp, aes(x=Event.num, y=MAE)) +
geom_line(aes(colour = Model, group = Model)) +
geom_point(aes(colour = Model), size=3)    +
labs(x = "Event Num", y = "MAE")
print(p1)
p1 <- ggplot(temp, aes(x=Event.num, y=MAE)) +
geom_line(aes(colour = Model, group = Model)) +
geom_point(aes(colour = Model), size=3)    +
labs(x = "Event Num", y = "MAE") +
theme(axis.text.x=element_text(angle = 90))
print(p1)
runApp()
head(tmp)
head(tmp2)
runApp()
runApp()
gm.data <- tmp2
n <- length(unique(gm.data$Model))
n
head(gm.data)
runApp()
n <- length(unique(gm.data$model))
n
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
model.cols <- data.frame(unique(gm.data$model), gg_color_hue(n))
model.cols
col.Model <- rep(0, nrow(temp))
length(col.Model)
for(i in 1:length(col.Model))
col.Model[i] <- model.cols[which(model.cols[,1]==temp[i,"Model"]),2]
head(col.Model)
i <- 1
model.cols[which(model.cols[,1]==temp[i,"Model"]),2]
class(model.cols)
class(model.cols[,1])
class(model.cols[,2])
model.cols <- data.frame(as.character(unique(gm.data$model)), as.character(gg_color_hue(n)))
head(model.cols)
class(model.cols[,2])
class(model.cols[,1])
class(gm.data$model)
model.cols <- data.frame(unique(gm.data$model), gg_color_hue(n))
model.cols <- data.frame(lapply(model.cols, as.character), stringsAsFactors=FALSE)
head(model.cols)
class(model.cols[,1])
for(i in 1:length(col.Model))
col.Model[i] <- model.cols[which(model.cols[,1]==temp[i,"Model"]),2]
head(col.Model)
runApp()
head(gm.data)
qqplot(gm.data$resids)
?qqplot
qqplot(gm.data$resids, gm.data$resids)
qqnorm(gm.data$resids)
qqline(gm.data$resids)
LM <- gm.data
y <- quantile(LM$resids, c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
y
y[1L]
?1L
L
y[1]
p <- ggplot(LM, aes(sample=.resid)) +
stat_qq(alpha = 0.5) +
geom_abline(slope = slope, intercept = int, color="blue")
print(p)
p <- ggplot(LM, aes(sample = .resids)) +
stat_qq(alpha = 0.5) +
geom_abline(slope = slope, intercept = int, color="blue")
print(p)
p <- ggplot(LM, aes(sample = resids)) +
stat_qq(alpha = 0.5) +
geom_abline(slope = slope, intercept = int, color="blue")
print(p)
runApp()
?stat_qq
qqnorm
qqplot
test <- rnorm(1000, mean = 5, sd = 3)
hist(test)
qqnorm(test)
qqline(test)
test <- rnorm(1000, mean = 5, sd = 10)
qqnorm(test)
qqline(test)
test <- rnorm(1000, mean = 5, sd = 1)
qqnorm(test)
qqline(test)
runApp()
runApp()
runApp()
y <- quantile(LM$resids, c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(LM, aes(sample = resids)) +
stat_qq(alpha = 0.5) +
geom_abline(slope = slope, intercept = int, color="blue")
print(p)
runApp()
?stat_qq
runApp()
runApp()
runApp()
sum(c(.25,.5,.25)*c(.5,.25,.25))
.25+.5
.75/2+.75/2+.25
x1 <- c(.1,.4,.5)
x2 <- c(.2,.5,.3)
x3 <- c(.1,.6,.3)
probs <- runif(1000)
runApp()
runApp()
runApp()
setwd("~/work/GFZ/GMPE App/Shiny")
setwd("~/work/GFZ/GMPE App/Shiny")
runApp()
?gam
